== SIMPLE -- Simplistic Instruction Machine Programming Language Execution ==

Misc:
NOP                     0x00
END                     0xFF

Data Manipulation:
MOV rA rB               0xD0
STR rA                  0xD1
LDR rA                  0xD2
LDC rA 0x##             0xD3

Arithmetic:
INC rA                  0xA0
DEC rA                  0xA1
NEG rA                  0xA2
ADD rA rB               0xA3
SUB rA rB               0xA4
AND rA rB               0xA5
OR  rA rB               0xA6
CMP rA rB               0xA7

Jumps:
JMP 0x##                0xB0
JLT 0x##                0xB1
JGT 0x##                0xB2
JUL 0x##                0xB3
JUG 0x##                0xB4
JEQ 0x##                0xB5


== Example ==

JMP main
x:
0x06
y:
0x09
main:
LDC r0 0x00
LDR r1 x
LDR r2 y
MOV r3 r0
JMP check
loop:
DEC r2
ADD r3 r1
check:
CMP r2 r0
JGT loop
STR r3 0xFF
END


== Bytes ==

0xB0 0x04           ; JMP main
0x06
0x09
0xD3 0x00 0x00      ; LDC r0 0x00       <-- main
0xD2 0x10 0x02      ; LDR r1 x
0xD2 0x20 0x03      ; LDR r2 y
0xD0 0x30           ; MOV r3 r0
0xB0 0x15           ; JMP check
0xA1 0x20           ; DEC r2            <-- loop
0xA5 0x31           ; ADD r3 r1
0xA7 0x20           ; CMP r2 r0         <-- check
0xB2 0x11           ; JGT loop
0xD1 0x30 0xFF      ; STR r3 0xFF
0xFF                ; END


== Compiled ==

B0 04 06 09 D3 00 00 D2 10 02 D2 20 03 D0 30 B0 14 A1 20 A5 31 A7 20 B2 11 D1 30 FF FF

